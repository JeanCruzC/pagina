<!-- Informaci√≥n de Progreso en Tiempo Real --><div class="alert alert-primary mb-4" id="progress-info">  <h5>‚öôÔ∏è Progreso de Optimizaci√≥n</h5>  <div class="row">    <div class="col-md-6">      <strong>üß† PuLP (Programaci√≥n Lineal):</strong>      <div class="progress mt-2 mb-2">        <div class="progress-bar" id="pulp-progress" role="progressbar" style="width: 0%">0%</div>      </div>      <small class="text-muted" id="pulp-time">Iniciando...</small>    </div>    <div class="col-md-6">      <strong>üåÄ Greedy (Heur√≠stico):</strong>      <div class="progress mt-2 mb-2">        <div class="progress-bar bg-success" id="greedy-progress" role="progressbar" style="width: 0%">0%</div>      </div>      <small class="text-muted" id="greedy-time">Iniciando...</small>    </div>  </div>  <div class="mt-2">    <small class="text-muted" id="jean-info" style="display:none;">      JEAN: iter <span id="jean-iter">-</span> ‚Ä¢ factor <span id="jean-factor">-</span>    </small>  </div>  <div class="mt-3">    <strong>‚è±Ô∏è Tiempos Estimados:</strong>    <ul class="mb-0">      <li><strong>Greedy:</strong> 1-2 minutos (r√°pido, heur√≠stico)</li>      <li><strong>PuLP:</strong> 2-6 minutos (√≥ptimo matem√°tico)</li>    </ul>  </div>  <div class="mt-2 small text-muted" id="stage-info"></div>  <div class="mt-1 small text-muted" id="agents-info"></div></div><script>function updateProgress() {  const jobId = window.location.pathname.split('/').pop();  fetch(`/resultados/${jobId}/refresh`)    .then(r => r.json())    .then(data => {      // PuLP      if (data.pulp_progress) {        const bar = document.getElementById('pulp-progress');        if (bar) {          const p = parseInt(data.pulp_progress);          bar.style.width = (isNaN(p) ? 0 : p) + '%';          bar.textContent = (isNaN(p) ? 0 : p) + '%';          if (!isNaN(p) && p >= 100) bar.classList.add('bg-success');        }      }      if (data.pulp_time) {        const t = document.getElementById('pulp-time');        if (t) t.textContent = data.pulp_time;      }      // Greedy      if (data.greedy_progress) {        const gbar = document.getElementById('greedy-progress');        if (gbar) {          const gp = parseInt(data.greedy_progress);          gbar.style.width = (isNaN(gp) ? 0 : gp) + '%';          gbar.textContent = (isNaN(gp) ? 0 : gp) + '%';        }      }      if (data.greedy_time) {        const gt = document.getElementById('greedy-time');        if (gt) gt.textContent = data.greedy_time;      }      // JEAN info      if (typeof data.jean_iter !== 'undefined' || typeof data.jean_factor !== 'undefined') {        const box = document.getElementById('jean-info');        if (box) box.style.display = '';        if (typeof data.jean_iter !== 'undefined') {          const el = document.getElementById('jean-iter');          if (el) el.textContent = data.jean_iter;        }        if (typeof data.jean_factor !== 'undefined') {          const el2 = document.getElementById('jean-factor');          if (el2) el2.textContent = data.jean_factor;        }      }      // Hide panel if endpoints say finished      if (data.has_greedy_results && data.has_pulp_results) {        const panel = document.getElementById('progress-info');        if (panel) panel.style.display = 'none';      }    })    .catch(() => {});}if (window.location.pathname.includes('/resultados/')) {  setInterval(updateProgress, 5000);  updateProgress();}</script>